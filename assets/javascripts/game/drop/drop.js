// Generated by CoffeeScript 1.3.1
var Drop, DropGhost,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

Drop = (function(_super) {

  __extends(Drop, _super);

  function Drop(handle, level) {
    Drop.__super__.constructor.call(this, handle, level);
    this.yAcceleration = 5;
    this.width = this.sprite.width;
    this.height = this.sprite.height;
    this.x = Math.floor(Math.random() * (this.level.context_width - this.width) + 1);
    this.y = 0;
  }

  Drop.prototype.update = function() {
    var ySpeed;
    if (this.level.speedModifier !== 1) {
      ySpeed = this.yAcceleration * this.level.speedModifier;
    } else {
      ySpeed = this.yAcceleration;
    }
    if (this.y + ySpeed > 0 && this.y + ySpeed + this.height < this.level.ground) {
      return this.y = this.y + ySpeed;
    } else {
      this.level.effects.push(new Explosion(this, this.x, this.y));
      return this.destroy();
    }
  };

  Drop.prototype.apply = function() {
    return this.level.effects.push(new DropGhost(this, this.level));
  };

  return Drop;

})(Sprite);

DropGhost = (function(_super) {

  __extends(DropGhost, _super);

  function DropGhost(drop, level) {
    DropGhost.__super__.constructor.call(this, drop.handle + '-ghost', level);
    this.drop = drop;
    this.yAcceleration = -3;
    this.opacity = 1;
    this.width = this.sprite.width;
    this.height = this.sprite.height;
    this.x = this.drop.x;
    this.y = this.drop.y;
  }

  DropGhost.prototype.update = function() {
    var ySpeed;
    this.opacity = this.opacity - 0.025;
    if (this.opacity <= 0) {
      this.destroy();
    }
    if (this.level.speedModifier !== 1) {
      ySpeed = this.yAcceleration * this.level.speedModifier;
    } else {
      ySpeed = this.yAcceleration;
    }
    if (this.y + ySpeed > 0 && this.y + ySpeed + this.height < this.level.context_height) {
      return this.y = this.y + ySpeed;
    } else {
      return this.destroy();
    }
  };

  DropGhost.prototype.draw = function() {
    this.level.context.globalAlpha = this.opacity;
    this.level.context.drawImage(this.sprite, this.x, this.y, this.width, this.height);
    return this.level.context.globalAlpha = 1;
  };

  return DropGhost;

})(Sprite);
