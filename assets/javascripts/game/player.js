// Generated by CoffeeScript 1.3.1
var Player,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

Player = (function(_super) {

  __extends(Player, _super);

  function Player(level) {
    var _this = this;
    Player.__super__.constructor.call(this, 'player', level);
    this.lives = 6;
    this.updateLives();
    this.killStreak = 0;
    this.x = this.level.context_width / 2;
    this.y = this.level.context_height - 100;
    this.colour = '#6f46ff';
    this.accelerationRate = 8;
    this.leftPressed = false;
    this.rightPressed = false;
    this.moving = true;
    $(window).on('keydown', function(e) {
      if (e.which === 39) {
        return _this.rightPressed = true;
      } else if (e.which === 37) {
        return _this.leftPressed = true;
      } else if (e.which === 32) {
        return _this.level.bullets.push(new Bullet(_this.level));
      }
    });
    $(window).on('keyup', function(e) {
      if (e.which === 39) {
        return _this.rightPressed = false;
      } else if (e.which === 37) {
        return _this.leftPressed = false;
      }
    });
  }

  Player.prototype.update = function() {
    var speed;
    speed = this.accelerationRate;
    if (this.leftPressed && (this.x - speed) >= 0) {
      this.x = this.x - speed;
    }
    if (this.rightPressed && (this.x + speed + this.width) <= this.level.context_width) {
      return this.x = this.x + speed;
    }
  };

  Player.prototype.incrementKillStreak = function() {
    return this.killStreak++;
  };

  Player.prototype.addLife = function(num) {
    if (num == null) {
      num = 1;
    }
    this.lives = this.lives + num;
    if (this.lives > 6) {
      this.lives = 6;
    }
    return this.updateLives();
  };

  Player.prototype.removeLife = function(num) {
    if (num == null) {
      num = 1;
    }
    this.killStreak = 0;
    this.lives = this.lives - num;
    if (this.lives === 0) {
      this.level.over();
    }
    return this.updateLives();
  };

  Player.prototype.updateLives = function() {
    return $('#lives').removeClass().addClass('lives_' + this.lives);
  };

  return Player;

})(Sprite);
