// Generated by CoffeeScript 1.3.1
var Player,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

Player = (function(_super) {

  __extends(Player, _super);

  function Player(game) {
    var _this = this;
    this.game = game;
    this.sprite = new Image();
    this.sprite.src = $('#player').attr('src');
    this.width = this.sprite.width;
    this.height = this.sprite.height;
    this.x = this.game.context_width / 2;
    this.y = this.game.context_height - 100;
    this.colour = '#6f46ff';
    this.accelerationRate = 8;
    this.leftPressed = false;
    this.rightPressed = false;
    this.moving = true;
    this.lives = 3;
    $(window).on('keydown', function(e) {
      if (e.which === 39) {
        return _this.rightPressed = true;
      } else if (e.which === 37) {
        return _this.leftPressed = true;
      } else if (e.which === 32) {
        return _this.game.bullets.push(new Bullet(_this.game));
      }
    });
    $(window).on('keyup', function(e) {
      if (e.which === 39) {
        return _this.rightPressed = false;
      } else if (e.which === 37) {
        return _this.leftPressed = false;
      }
    });
  }

  Player.prototype.update = function() {
    if (this.upPressed && (this.y - this.accelerationRate) > (0 - this.accelerationRate)) {
      this.y = this.y - this.accelerationRate;
    }
    if (this.downPressed && (this.y + this.accelerationRate + this.height) <= (this.game.canvas.height + this.accelerationRate)) {
      this.y = this.y + this.accelerationRate;
    }
    if (this.leftPressed && (this.x - this.accelerationRate) >= 0) {
      this.x = this.x - this.accelerationRate;
    }
    if (this.rightPressed && (this.x + this.accelerationRate + this.width) <= this.game.canvas.width) {
      return this.x = this.x + this.accelerationRate;
    }
  };

  return Player;

})(Entity);
